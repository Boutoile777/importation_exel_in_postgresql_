{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cesar Boutoile777\\\\Connexion\\\\frontend\\\\dashboard\\\\src\\\\pages\\\\ImporterDonnees.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { FiUpload, FiEdit, FiCheckCircle, FiDatabase } from 'react-icons/fi';\n// import * as XLSX from 'xlsx';\n\n// function Importation() {\n//   const [file, setFile] = useState(null);\n//   const [data, setData] = useState([]);\n//   const [editMode, setEditMode] = useState(false);\n//   const [editFinished, setEditFinished] = useState(false);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [importStatus, setImportStatus] = useState(null);\n//   const [selectedFacilite, setSelectedFacilite] = useState('');\n//   const [faciliteConfirmee, setFaciliteConfirmee] = useState(false);\n\n//   const rowsPerPage = 101;\n\n//   const handleFileChange = (e) => {\n//     const selectedFile = e.target.files[0];\n//     setFile(selectedFile);\n//     setEditFinished(false);\n//     setEditMode(false);\n//     setCurrentPage(1);\n//     setImportStatus(null);\n\n//     const reader = new FileReader();\n//     reader.onload = (evt) => {\n//       const bstr = evt.target.result;\n//       const wb = XLSX.read(bstr, { type: 'binary' });\n//       const wsname = wb.SheetNames[0];\n//       const ws = wb.Sheets[wsname];\n//       const jsonData = XLSX.utils.sheet_to_json(ws, { header: 1 });\n//       setData(jsonData);\n//     };\n//     reader.readAsBinaryString(selectedFile);\n//   };\n\n//   const handleEdit = () => {\n//     setEditMode(true);\n//     setEditFinished(false);\n//   };\n\n//   const handleFinishEdit = () => {\n//     setEditMode(false);\n//     setEditFinished(true);\n//   };\n\n//   const handleCellChange = (rowIndex, colIndex, value) => {\n//     const newData = [...data];\n//     newData[rowIndex][colIndex] = value;\n//     setData(newData);\n//   };\n\n//   const handleImportToDB = async () => {\n//     if (!file) {\n//       setImportStatus({ success: false, message: \"Veuillez sélectionner un fichier avant d'importer.\" });\n//       return;\n//     }\n\n//     try {\n//       const formData = new FormData();\n//       formData.append('file', file);\n//       formData.append('type_facilite', selectedFacilite);\n\n//       const response = await fetch('http://localhost:5000/auth/import_excel', {\n//         credentials: \"include\",\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       if (!response.ok) {\n//         const errorText = await response.text();\n//         throw new Error(`Erreur serveur : ${errorText}`);\n//       }\n\n//       const result = await response.json();\n//       setImportStatus({ success: true, message: result.message || 'Importation réussie !' });\n//     } catch (error) {\n//       setImportStatus({ success: false, message: error.message || \"Erreur lors de l'importation.\" });\n//     }\n//   };\n\n//   const totalPages = Math.ceil(data.length / rowsPerPage);\n//   const startIndex = (currentPage - 1) * rowsPerPage;\n//   const endIndex = startIndex + rowsPerPage;\n//   const pageData = data.slice(startIndex, endIndex);\n\n//   const inputStyle = {\n//     width: '100%',\n//     minWidth: '200px',\n//     border: 'none',\n//     backgroundColor: 'transparent',\n//     padding: '12px 16px',\n//     fontFamily: 'inherit',\n//     fontSize: 'inherit',\n//     lineHeight: 'inherit',\n//     color: 'black',\n//     outline: 'none',\n//     boxSizing: 'border-box',\n//     textAlign: 'left',\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-gray-100 px-4 py-8\">\n//       <div className=\"max-w-7xl mx-auto\">\n//         <h1 className=\"text-4xl md:text-5xl font-extrabold text-center text-green-700 mb-8\">Importation Excel</h1>\n\n//         {!faciliteConfirmee && (\n//           <div className=\"bg-white rounded-xl shadow-lg p-10 w-full max-w-xl mx-auto mb-10\">\n//             <h2 className=\"text-xl font-semibold text-green-700 mb-4 text-center\">Choisissez une facilité</h2>\n//             <div className=\"space-y-2\">\n//               {[\"PDA\", \"PSF\", \"Filière\"].map((facilite) => (\n//                 <label key={facilite} className=\"flex items-center gap-3\">\n//                   <input\n//                     type=\"radio\"\n//                     name=\"facilite\"\n//                     value={facilite}\n//                     checked={selectedFacilite === facilite}\n//                     onChange={(e) => setSelectedFacilite(e.target.value)}\n//                     className=\"accent-green-600\"\n//                   />\n//                   <span className=\"text-gray-700\">{facilite}</span>\n//                 </label>\n//               ))}\n//             </div>\n//             <button\n//               onClick={() => selectedFacilite && setFaciliteConfirmee(true)}\n//               className=\"mt-6 bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg w-full\"\n//               disabled={!selectedFacilite}\n//             >\n//               Confirmer votre choix\n//             </button>\n//           </div>\n//         )}\n\n//         {faciliteConfirmee && (\n//           <>\n//             <div className=\"text-center text-green-700 font-semibold mb-4\">\n//               Facilité sélectionnée : {selectedFacilite}\n//             </div>\n\n//             {!file && (\n//               <div className=\"bg-white rounded-xl shadow-lg p-10 text-center border-2 border-dashed border-green-600 w-96 mx-auto\">\n//                 <FiUpload className=\"text-green-600 mx-auto mb-4\" size={80} />\n//                 <h2 className=\"text-xl font-semibold text-green-700 mb-2\">Déposez un fichier Excel ici</h2>\n//                 <p className=\"text-gray-600 mb-6\">Format accepté : .xlsx</p>\n//                 <label className=\"inline-block bg-green-600 text-white px-6 py-3 rounded-lg cursor-pointer hover:bg-green-700 transition\">\n//                   Choisir un fichier Excel\n//                   <input type=\"file\" accept=\".xlsx\" className=\"hidden\" onChange={handleFileChange} />\n//                 </label>\n//               </div>\n//             )}\n\n//             {file && (\n//               <div className=\"mt-8\">\n//                 <div className=\"text-gray-700 text-center mb-4 italic\">Fichier sélectionné : {file.name}</div>\n\n//                 <div className=\"overflow-auto rounded-lg shadow-md bg-white\">\n//                   <table className=\"min-w-full text-sm table-auto border-collapse\">\n//                     <thead>\n//                       <tr className=\"bg-green-700 text-white\">\n//                         {data[0] && data[0].map((col, i) => (\n//                           <th key={i} className=\"px-4 py-3 text-left font-semibold\">{col}</th>\n//                         ))}\n//                       </tr>\n//                     </thead>\n//                     <tbody>\n//                       {pageData.slice(1).map((row, rowIndex) => (\n//                         <tr key={rowIndex} className=\"even:bg-gray-50 hover:bg-green-50\">\n//                           {row.map((cell, colIndex) => (\n//                             <td key={colIndex} className=\"px-4 py-3 border-t border-gray-200 align-top\" style={editMode ? { minWidth: '200px' } : {}}>\n//                               {editMode ? (\n//                                 <input\n//                                   type=\"text\"\n//                                   value={cell || ''}\n//                                   onChange={(e) => handleCellChange(startIndex + rowIndex + 1, colIndex, e.target.value)}\n//                                   style={inputStyle}\n//                                   spellCheck={false}\n//                                 />\n//                               ) : (\n//                                 <span>{cell}</span>\n//                               )}\n//                             </td>\n//                           ))}\n//                         </tr>\n//                       ))}\n//                     </tbody>\n//                   </table>\n//                 </div>\n\n//                 {data.length > rowsPerPage && (\n//                   <div className=\"flex justify-center items-center gap-4 mt-6\">\n//                     <button onClick={() => setCurrentPage((p) => Math.max(1, p - 1))} disabled={currentPage === 1} className=\"bg-gray-200 px-4 py-2 rounded hover:bg-gray-300 disabled:opacity-50\">\n//                       Précédent\n//                     </button>\n//                     <span>Page {currentPage} / {totalPages}</span>\n//                     <button onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages} className=\"bg-gray-200 px-4 py-2 rounded hover:bg-gray-300 disabled:opacity-50\">\n//                       Suivant\n//                     </button>\n//                   </div>\n//                 )}\n\n//                 <div className=\"flex flex-wrap justify-center gap-4 mt-6\">\n//                   {!editMode && !editFinished && (\n//                     <>\n//                       <button onClick={handleEdit} className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-5 py-2 rounded flex items-center gap-2\">\n//                         <FiEdit /> Modifier\n//                       </button>\n//                       <button onClick={handleImportToDB} className=\"bg-green-700 hover:bg-green-800 text-white px-5 py-2 rounded flex items-center gap-2\">\n//                         <FiDatabase /> Importer dans la base\n//                       </button>\n//                     </>\n//                   )}\n\n//                   {editMode && (\n//                     <button onClick={handleFinishEdit} className=\"bg-blue-600 hover:bg-blue-700 text-white px-5 py-2 rounded flex items-center gap-2\">\n//                       <FiCheckCircle /> Terminer les modifications\n//                     </button>\n//                   )}\n//                 </div>\n\n//                 {importStatus && (\n//                   <div className={`mt-4 text-center font-semibold ${importStatus.success ? 'text-green-600' : 'text-red-600'}`}>\n//                     {importStatus.message}\n//                   </div>\n//                 )}\n//               </div>\n//             )}\n//           </>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Importation;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Importation() {\n  _s();\n  var _facilites$find;\n  const [facilites, setFacilites] = useState([]);\n  const [selectedFacilite, setSelectedFacilite] = useState('');\n  const [faciliteConfirmee, setFaciliteConfirmee] = useState(false);\n  const [erreur, setErreur] = useState('');\n  useEffect(() => {\n    fetch('http://localhost:5000/auth/type_projets', {\n      credentials: 'include'\n    }).then(res => res.json()).then(data => setFacilites(data)).catch(error => console.error('Erreur lors du chargement des facilités :', error));\n  }, []);\n  const handleConfirmerFacilite = async () => {\n    if (!selectedFacilite) {\n      setErreur('Le choix de facilité est obligatoire.');\n      return;\n    }\n    try {\n      await fetch('http://localhost:5000/auth/selection_type_projet', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          id_type_projet: selectedFacilite\n        })\n      });\n      setFaciliteConfirmee(true);\n      setErreur('');\n    } catch (error) {\n      console.error('Erreur lors de la confirmation de la facilité :', error);\n    }\n  };\n  const nomFaciliteSelectionnee = (_facilites$find = facilites.find(f => f.id_type_projet === selectedFacilite)) === null || _facilites$find === void 0 ? void 0 : _facilites$find.nom_facilite;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto mt-10 p-6 bg-white shadow-md rounded-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold mb-6 text-center text-green-700\",\n      children: \"Importer des donn\\xE9es\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), !faciliteConfirmee ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-6 text-gray-600 text-center\",\n        children: \"S\\xE9lectionnez une facilit\\xE9 ci-dessous :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6\",\n        children: facilites.map(facilite => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => setSelectedFacilite(facilite.id_type_projet),\n          className: `cursor-pointer border rounded-lg p-4 shadow-sm text-center transition-all duration-200 ${selectedFacilite === facilite.id_type_projet ? 'bg-green-100 border-green-500 text-green-800 font-semibold shadow-md' : 'hover:bg-gray-100'}`,\n          children: facilite.nom_facilite\n        }, facilite.id_type_projet, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this), erreur && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-600 mb-4 text-center font-medium\",\n        children: erreur\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConfirmerFacilite,\n        className: \"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg w-full\",\n        children: \"Confirmer votre choix\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-700 text-lg font-medium\",\n        children: [\"Facilit\\xE9 s\\xE9lectionn\\xE9e :\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-green-700 font-semibold\",\n          children: nomFaciliteSelectionnee\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n}\n_s(Importation, \"tFFVNQdQBWoX9WYWWG5YWI+cffU=\");\n_c = Importation;\nexport default Importation;\n\n// import React, { useState, useEffect } from 'react';\n\n// function Importation() {\n//   const [facilites, setFacilites] = useState([]);\n//   const [selectedFacilite, setSelectedFacilite] = useState('');\n//   const [faciliteConfirmee, setFaciliteConfirmee] = useState(false);\n\n//   // Récupération des facilités disponibles depuis le backend\n//   useEffect(() => {\n//     fetch('http://localhost:5000/auth/type_projets', {\n//       credentials: 'include',\n//     })\n//       .then((response) => response.json())\n//       .then((data) => setFacilites(data))\n//       .catch((error) =>\n//         console.error('Erreur lors du chargement des facilités :', error)\n//       );\n//   }, []);\n\n//   // Envoi de l'id_type_projet sélectionné vers le backend\n//   const handleConfirmerFacilite = async () => {\n//     if (!selectedFacilite) return;\n\n//     try {\n//       const response = await fetch(\n//         'http://localhost:5000/auth/selection_type_projet',\n//         {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           credentials: 'include',\n//           body: JSON.stringify({ id_type_projet: selectedFacilite }),\n//         }\n//       );\n\n//       if (!response.ok) {\n//         const errorText = await response.text();\n//         throw new Error(`Erreur serveur : ${errorText}`);\n//       }\n\n//       setFaciliteConfirmee(true);\n//     } catch (error) {\n//       console.error('Erreur lors de la confirmation de la facilité :', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"max-w-2xl mx-auto mt-10 p-6 bg-white shadow-md rounded-lg\">\n//       <h2 className=\"text-2xl font-semibold mb-4 text-center text-green-700\">\n//         Importer des données\n//       </h2>\n\n//       {!faciliteConfirmee ? (\n//         <>\n//           <p className=\"mb-4 text-gray-600 text-center\">\n//             Veuillez sélectionner une facilité avant de continuer.\n//           </p>\n\n//           <div className=\"space-y-3\">\n//             {facilites.map((facilite) => (\n//               <label\n//                 key={facilite.id_type_projet}\n//                 className=\"flex items-center gap-3\"\n//               >\n//                 <input\n//                   type=\"radio\"\n//                   name=\"facilite\"\n//                   value={facilite.id_type_projet}\n//                   checked={selectedFacilite === facilite.id_type_projet}\n//                   onChange={(e) => setSelectedFacilite(e.target.value)}\n//                   className=\"accent-green-600\"\n//                 />\n//                 <span className=\"text-gray-700\">{facilite.nom_facilite}</span>\n//               </label>\n//             ))}\n//           </div>\n\n//           <button\n//             onClick={handleConfirmerFacilite}\n//             className=\"mt-6 bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg w-full\"\n//             disabled={!selectedFacilite}\n//           >\n//             Confirmer votre choix\n//           </button>\n//         </>\n//       ) : (\n//         <div className=\"text-center\">\n//           <p className=\"text-green-700 text-lg font-medium\">\n//             Facilité sélectionnée avec succès !\n//           </p>\n//           {/* Vous pouvez maintenant ajouter ici l'étape suivante, comme l'importation du fichier */}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Importation;\nvar _c;\n$RefreshReg$(_c, \"Importation\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Importation","_s","_facilites$find","facilites","setFacilites","selectedFacilite","setSelectedFacilite","faciliteConfirmee","setFaciliteConfirmee","erreur","setErreur","fetch","credentials","then","res","json","data","catch","error","console","handleConfirmerFacilite","method","headers","body","JSON","stringify","id_type_projet","nomFaciliteSelectionnee","find","f","nom_facilite","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","facilite","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Cesar Boutoile777/Connexion/frontend/dashboard/src/pages/ImporterDonnees.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { FiUpload, FiEdit, FiCheckCircle, FiDatabase } from 'react-icons/fi';\r\n// import * as XLSX from 'xlsx';\r\n\r\n// function Importation() {\r\n//   const [file, setFile] = useState(null);\r\n//   const [data, setData] = useState([]);\r\n//   const [editMode, setEditMode] = useState(false);\r\n//   const [editFinished, setEditFinished] = useState(false);\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [importStatus, setImportStatus] = useState(null);\r\n//   const [selectedFacilite, setSelectedFacilite] = useState('');\r\n//   const [faciliteConfirmee, setFaciliteConfirmee] = useState(false);\r\n\r\n//   const rowsPerPage = 101;\r\n\r\n//   const handleFileChange = (e) => {\r\n//     const selectedFile = e.target.files[0];\r\n//     setFile(selectedFile);\r\n//     setEditFinished(false);\r\n//     setEditMode(false);\r\n//     setCurrentPage(1);\r\n//     setImportStatus(null);\r\n\r\n//     const reader = new FileReader();\r\n//     reader.onload = (evt) => {\r\n//       const bstr = evt.target.result;\r\n//       const wb = XLSX.read(bstr, { type: 'binary' });\r\n//       const wsname = wb.SheetNames[0];\r\n//       const ws = wb.Sheets[wsname];\r\n//       const jsonData = XLSX.utils.sheet_to_json(ws, { header: 1 });\r\n//       setData(jsonData);\r\n//     };\r\n//     reader.readAsBinaryString(selectedFile);\r\n//   };\r\n\r\n//   const handleEdit = () => {\r\n//     setEditMode(true);\r\n//     setEditFinished(false);\r\n//   };\r\n\r\n//   const handleFinishEdit = () => {\r\n//     setEditMode(false);\r\n//     setEditFinished(true);\r\n//   };\r\n\r\n//   const handleCellChange = (rowIndex, colIndex, value) => {\r\n//     const newData = [...data];\r\n//     newData[rowIndex][colIndex] = value;\r\n//     setData(newData);\r\n//   };\r\n\r\n//   const handleImportToDB = async () => {\r\n//     if (!file) {\r\n//       setImportStatus({ success: false, message: \"Veuillez sélectionner un fichier avant d'importer.\" });\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const formData = new FormData();\r\n//       formData.append('file', file);\r\n//       formData.append('type_facilite', selectedFacilite);\r\n\r\n//       const response = await fetch('http://localhost:5000/auth/import_excel', {\r\n//         credentials: \"include\",\r\n//         method: 'POST',\r\n//         body: formData,\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         throw new Error(`Erreur serveur : ${errorText}`);\r\n//       }\r\n\r\n//       const result = await response.json();\r\n//       setImportStatus({ success: true, message: result.message || 'Importation réussie !' });\r\n//     } catch (error) {\r\n//       setImportStatus({ success: false, message: error.message || \"Erreur lors de l'importation.\" });\r\n//     }\r\n//   };\r\n\r\n//   const totalPages = Math.ceil(data.length / rowsPerPage);\r\n//   const startIndex = (currentPage - 1) * rowsPerPage;\r\n//   const endIndex = startIndex + rowsPerPage;\r\n//   const pageData = data.slice(startIndex, endIndex);\r\n\r\n//   const inputStyle = {\r\n//     width: '100%',\r\n//     minWidth: '200px',\r\n//     border: 'none',\r\n//     backgroundColor: 'transparent',\r\n//     padding: '12px 16px',\r\n//     fontFamily: 'inherit',\r\n//     fontSize: 'inherit',\r\n//     lineHeight: 'inherit',\r\n//     color: 'black',\r\n//     outline: 'none',\r\n//     boxSizing: 'border-box',\r\n//     textAlign: 'left',\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gray-100 px-4 py-8\">\r\n//       <div className=\"max-w-7xl mx-auto\">\r\n//         <h1 className=\"text-4xl md:text-5xl font-extrabold text-center text-green-700 mb-8\">Importation Excel</h1>\r\n\r\n//         {!faciliteConfirmee && (\r\n//           <div className=\"bg-white rounded-xl shadow-lg p-10 w-full max-w-xl mx-auto mb-10\">\r\n//             <h2 className=\"text-xl font-semibold text-green-700 mb-4 text-center\">Choisissez une facilité</h2>\r\n//             <div className=\"space-y-2\">\r\n//               {[\"PDA\", \"PSF\", \"Filière\"].map((facilite) => (\r\n//                 <label key={facilite} className=\"flex items-center gap-3\">\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     name=\"facilite\"\r\n//                     value={facilite}\r\n//                     checked={selectedFacilite === facilite}\r\n//                     onChange={(e) => setSelectedFacilite(e.target.value)}\r\n//                     className=\"accent-green-600\"\r\n//                   />\r\n//                   <span className=\"text-gray-700\">{facilite}</span>\r\n//                 </label>\r\n//               ))}\r\n//             </div>\r\n//             <button\r\n//               onClick={() => selectedFacilite && setFaciliteConfirmee(true)}\r\n//               className=\"mt-6 bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg w-full\"\r\n//               disabled={!selectedFacilite}\r\n//             >\r\n//               Confirmer votre choix\r\n//             </button>\r\n//           </div>\r\n//         )}\r\n\r\n//         {faciliteConfirmee && (\r\n//           <>\r\n//             <div className=\"text-center text-green-700 font-semibold mb-4\">\r\n//               Facilité sélectionnée : {selectedFacilite}\r\n//             </div>\r\n\r\n//             {!file && (\r\n//               <div className=\"bg-white rounded-xl shadow-lg p-10 text-center border-2 border-dashed border-green-600 w-96 mx-auto\">\r\n//                 <FiUpload className=\"text-green-600 mx-auto mb-4\" size={80} />\r\n//                 <h2 className=\"text-xl font-semibold text-green-700 mb-2\">Déposez un fichier Excel ici</h2>\r\n//                 <p className=\"text-gray-600 mb-6\">Format accepté : .xlsx</p>\r\n//                 <label className=\"inline-block bg-green-600 text-white px-6 py-3 rounded-lg cursor-pointer hover:bg-green-700 transition\">\r\n//                   Choisir un fichier Excel\r\n//                   <input type=\"file\" accept=\".xlsx\" className=\"hidden\" onChange={handleFileChange} />\r\n//                 </label>\r\n//               </div>\r\n//             )}\r\n\r\n//             {file && (\r\n//               <div className=\"mt-8\">\r\n//                 <div className=\"text-gray-700 text-center mb-4 italic\">Fichier sélectionné : {file.name}</div>\r\n\r\n//                 <div className=\"overflow-auto rounded-lg shadow-md bg-white\">\r\n//                   <table className=\"min-w-full text-sm table-auto border-collapse\">\r\n//                     <thead>\r\n//                       <tr className=\"bg-green-700 text-white\">\r\n//                         {data[0] && data[0].map((col, i) => (\r\n//                           <th key={i} className=\"px-4 py-3 text-left font-semibold\">{col}</th>\r\n//                         ))}\r\n//                       </tr>\r\n//                     </thead>\r\n//                     <tbody>\r\n//                       {pageData.slice(1).map((row, rowIndex) => (\r\n//                         <tr key={rowIndex} className=\"even:bg-gray-50 hover:bg-green-50\">\r\n//                           {row.map((cell, colIndex) => (\r\n//                             <td key={colIndex} className=\"px-4 py-3 border-t border-gray-200 align-top\" style={editMode ? { minWidth: '200px' } : {}}>\r\n//                               {editMode ? (\r\n//                                 <input\r\n//                                   type=\"text\"\r\n//                                   value={cell || ''}\r\n//                                   onChange={(e) => handleCellChange(startIndex + rowIndex + 1, colIndex, e.target.value)}\r\n//                                   style={inputStyle}\r\n//                                   spellCheck={false}\r\n//                                 />\r\n//                               ) : (\r\n//                                 <span>{cell}</span>\r\n//                               )}\r\n//                             </td>\r\n//                           ))}\r\n//                         </tr>\r\n//                       ))}\r\n//                     </tbody>\r\n//                   </table>\r\n//                 </div>\r\n\r\n//                 {data.length > rowsPerPage && (\r\n//                   <div className=\"flex justify-center items-center gap-4 mt-6\">\r\n//                     <button onClick={() => setCurrentPage((p) => Math.max(1, p - 1))} disabled={currentPage === 1} className=\"bg-gray-200 px-4 py-2 rounded hover:bg-gray-300 disabled:opacity-50\">\r\n//                       Précédent\r\n//                     </button>\r\n//                     <span>Page {currentPage} / {totalPages}</span>\r\n//                     <button onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages} className=\"bg-gray-200 px-4 py-2 rounded hover:bg-gray-300 disabled:opacity-50\">\r\n//                       Suivant\r\n//                     </button>\r\n//                   </div>\r\n//                 )}\r\n\r\n//                 <div className=\"flex flex-wrap justify-center gap-4 mt-6\">\r\n//                   {!editMode && !editFinished && (\r\n//                     <>\r\n//                       <button onClick={handleEdit} className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-5 py-2 rounded flex items-center gap-2\">\r\n//                         <FiEdit /> Modifier\r\n//                       </button>\r\n//                       <button onClick={handleImportToDB} className=\"bg-green-700 hover:bg-green-800 text-white px-5 py-2 rounded flex items-center gap-2\">\r\n//                         <FiDatabase /> Importer dans la base\r\n//                       </button>\r\n//                     </>\r\n//                   )}\r\n\r\n//                   {editMode && (\r\n//                     <button onClick={handleFinishEdit} className=\"bg-blue-600 hover:bg-blue-700 text-white px-5 py-2 rounded flex items-center gap-2\">\r\n//                       <FiCheckCircle /> Terminer les modifications\r\n//                     </button>\r\n//                   )}\r\n//                 </div>\r\n\r\n//                 {importStatus && (\r\n//                   <div className={`mt-4 text-center font-semibold ${importStatus.success ? 'text-green-600' : 'text-red-600'}`}>\r\n//                     {importStatus.message}\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n//           </>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Importation;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction Importation() {\r\n  const [facilites, setFacilites] = useState([]);\r\n  const [selectedFacilite, setSelectedFacilite] = useState('');\r\n  const [faciliteConfirmee, setFaciliteConfirmee] = useState(false);\r\n  const [erreur, setErreur] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:5000/auth/type_projets', {\r\n      credentials: 'include',\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => setFacilites(data))\r\n      .catch((error) =>\r\n        console.error('Erreur lors du chargement des facilités :', error)\r\n      );\r\n  }, []);\r\n\r\n  const handleConfirmerFacilite = async () => {\r\n    if (!selectedFacilite) {\r\n      setErreur('Le choix de facilité est obligatoire.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await fetch('http://localhost:5000/auth/selection_type_projet', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify({ id_type_projet: selectedFacilite }),\r\n      });\r\n\r\n      setFaciliteConfirmee(true);\r\n      setErreur('');\r\n    } catch (error) {\r\n      console.error('Erreur lors de la confirmation de la facilité :', error);\r\n    }\r\n  };\r\n\r\n  const nomFaciliteSelectionnee = facilites.find(\r\n    (f) => f.id_type_projet === selectedFacilite\r\n  )?.nom_facilite;\r\n\r\n  return (\r\n    <div className=\"max-w-3xl mx-auto mt-10 p-6 bg-white shadow-md rounded-lg\">\r\n      <h2 className=\"text-2xl font-semibold mb-6 text-center text-green-700\">\r\n        Importer des données\r\n      </h2>\r\n\r\n      {!faciliteConfirmee ? (\r\n        <>\r\n          <p className=\"mb-6 text-gray-600 text-center\">\r\n            Sélectionnez une facilité ci-dessous :\r\n          </p>\r\n\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6\">\r\n            {facilites.map((facilite) => (\r\n              <div\r\n                key={facilite.id_type_projet}\r\n                onClick={() => setSelectedFacilite(facilite.id_type_projet)}\r\n                className={`cursor-pointer border rounded-lg p-4 shadow-sm text-center transition-all duration-200 ${\r\n                  selectedFacilite === facilite.id_type_projet\r\n                    ? 'bg-green-100 border-green-500 text-green-800 font-semibold shadow-md'\r\n                    : 'hover:bg-gray-100'\r\n                }`}\r\n              >\r\n                {facilite.nom_facilite}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {erreur && (\r\n            <p className=\"text-red-600 mb-4 text-center font-medium\">{erreur}</p>\r\n          )}\r\n\r\n          <button\r\n            onClick={handleConfirmerFacilite}\r\n            className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg w-full\"\r\n          >\r\n            Confirmer votre choix\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <div className=\"text-center\">\r\n          <p className=\"text-gray-700 text-lg font-medium\">\r\n            Facilité sélectionnée :{' '}\r\n            <span className=\"text-green-700 font-semibold\">{nomFaciliteSelectionnee}</span>\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Importation;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// function Importation() {\r\n//   const [facilites, setFacilites] = useState([]);\r\n//   const [selectedFacilite, setSelectedFacilite] = useState('');\r\n//   const [faciliteConfirmee, setFaciliteConfirmee] = useState(false);\r\n\r\n//   // Récupération des facilités disponibles depuis le backend\r\n//   useEffect(() => {\r\n//     fetch('http://localhost:5000/auth/type_projets', {\r\n//       credentials: 'include',\r\n//     })\r\n//       .then((response) => response.json())\r\n//       .then((data) => setFacilites(data))\r\n//       .catch((error) =>\r\n//         console.error('Erreur lors du chargement des facilités :', error)\r\n//       );\r\n//   }, []);\r\n\r\n//   // Envoi de l'id_type_projet sélectionné vers le backend\r\n//   const handleConfirmerFacilite = async () => {\r\n//     if (!selectedFacilite) return;\r\n\r\n//     try {\r\n//       const response = await fetch(\r\n//         'http://localhost:5000/auth/selection_type_projet',\r\n//         {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//           credentials: 'include',\r\n//           body: JSON.stringify({ id_type_projet: selectedFacilite }),\r\n//         }\r\n//       );\r\n\r\n//       if (!response.ok) {\r\n//         const errorText = await response.text();\r\n//         throw new Error(`Erreur serveur : ${errorText}`);\r\n//       }\r\n\r\n//       setFaciliteConfirmee(true);\r\n//     } catch (error) {\r\n//       console.error('Erreur lors de la confirmation de la facilité :', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"max-w-2xl mx-auto mt-10 p-6 bg-white shadow-md rounded-lg\">\r\n//       <h2 className=\"text-2xl font-semibold mb-4 text-center text-green-700\">\r\n//         Importer des données\r\n//       </h2>\r\n\r\n//       {!faciliteConfirmee ? (\r\n//         <>\r\n//           <p className=\"mb-4 text-gray-600 text-center\">\r\n//             Veuillez sélectionner une facilité avant de continuer.\r\n//           </p>\r\n\r\n//           <div className=\"space-y-3\">\r\n//             {facilites.map((facilite) => (\r\n//               <label\r\n//                 key={facilite.id_type_projet}\r\n//                 className=\"flex items-center gap-3\"\r\n//               >\r\n//                 <input\r\n//                   type=\"radio\"\r\n//                   name=\"facilite\"\r\n//                   value={facilite.id_type_projet}\r\n//                   checked={selectedFacilite === facilite.id_type_projet}\r\n//                   onChange={(e) => setSelectedFacilite(e.target.value)}\r\n//                   className=\"accent-green-600\"\r\n//                 />\r\n//                 <span className=\"text-gray-700\">{facilite.nom_facilite}</span>\r\n//               </label>\r\n//             ))}\r\n//           </div>\r\n\r\n//           <button\r\n//             onClick={handleConfirmerFacilite}\r\n//             className=\"mt-6 bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg w-full\"\r\n//             disabled={!selectedFacilite}\r\n//           >\r\n//             Confirmer votre choix\r\n//           </button>\r\n//         </>\r\n//       ) : (\r\n//         <div className=\"text-center\">\r\n//           <p className=\"text-green-700 text-lg font-medium\">\r\n//             Facilité sélectionnée avec succès !\r\n//           </p>\r\n//           {/* Vous pouvez maintenant ajouter ici l'étape suivante, comme l'importation du fichier */}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Importation;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAiBA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnD,SAASC,WAAWA,CAAA,E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OAAA;UAAMkC,SAAS,EAAC,8BAA8B;UAAAC,QAAA,EAAEL;QAAuB;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9E;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnC,EAAA,CA7FQD,WAAW;AAAAwC,EAAA,GAAXxC,WAAW;AA+FpB,eAAeA,WAAW;;AA+C1B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}